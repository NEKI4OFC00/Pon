import telebot
from telebot import types
import sqlite3
import random
import string
from datetime import datetime, timedelta
import threading
import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from time import sleep

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ email –∞–∫–∫–∞—É–Ω—Ç—ã
EMAIL_ACCOUNTS = [
    {'email': 'nik.sokolovskiy.2025@mail.ru', 'password': '05092016A0+7D'}
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ—á—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å—é–¥–∞
]
EMAIL_ADDRESSES = [
    'security@telegram.org',
    'sms@telegram.org',
    'stopCA@telegram.org',
    'abuse@telegram.org',
    'dmca@telegram.org'
]

BOT_TOKEN = '7219521716:AAFm3jUeIL4VDBEJHuwE8kBxHkrRoYScnAc'
ADMIN_IDS = [6665308361]
PROMO_ADMIN_IDS = [6665308361, 7168398511]  # –ü—Ä–∏–º–µ—Ä ID –ø—Ä–æ–º–æ-–∞–¥–º–∏–Ω–æ–≤

bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
conn = sqlite3.connect('referrals.db', check_same_thread=False)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
with conn:
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS referrals (
            user_id INTEGER PRIMARY KEY,
            referrer_id INTEGER,
            invited_count INTEGER DEFAULT 0,
            first_time BOOLEAN DEFAULT 1
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            duration INTEGER,
            used BOOLEAN DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_promotions (
            user_id INTEGER PRIMARY KEY,
            end_time TIMESTAMP
        )
    ''')

def generate_promocode(prefix):
    code = prefix + ''.join(random.choice(string.ascii_uppercase) for _ in range(5))
    code += random.choice(string.digits + '#&!?')
    return code

def save_user_data():
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_promotions')
    users = cursor.fetchall()
    with open('user_data.txt', 'w') as f:
        for user in users:
            user_id, end_time = user
            f.write(f'{user_id},{end_time}\n')

def load_user_data():
    file_path = 'user_data.txt'
    if os.path.exists(file_path):
        cursor = conn.cursor()
        with open(file_path, 'r') as f:
            for line in f:
                user_id, end_time = line.strip().split(',')
                cursor.execute('INSERT OR REPLACE INTO user_promotions (user_id, end_time) VALUES (?, ?)', (user_id, end_time))
        conn.commit()
    else:
        print(f"File {file_path} does not exist")

def schedule_updates():
    threading.Timer(1800, schedule_updates).start()
    save_user_data()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    cursor = conn.cursor()
    
    cursor.execute('SELECT first_time FROM referrals WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if not result:
        referrer_id = message.text.split("?start=")[-1] if '?start=' in message.text else None
        cursor.execute('INSERT INTO referrals (user_id, referrer_id, invited_count, first_time) VALUES (?, 0, 1)', (user_id, referrer_id))
        conn.commit()

        if referrer_id is not None:
            cursor.execute('UPDATE referrals SET invited_count = invited_count + 1 WHERE user_id = ?', (referrer_id,))
            conn.commit()
    else:
        referrer_id = None

    cursor.execute('UPDATE referrals SET first_time = 0 WHERE user_id = ?', (user_id,))
    conn.commit()

    referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"

    cursor.execute('SELECT invited_count FROM referrals WHERE user_id = ?', (user_id,))
    invited_count = cursor.fetchone()[0]

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"),
        types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")
    )
    
    if user_id in ADMIN_IDS:
        markup.row(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode"))
    
    cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
    promotion = cursor.fetchone()
    if promotion and datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f') > datetime.now():
        markup.row(types.InlineKeyboardButton("–°–Ω–æ—Å", callback_data="snos"))

    markup.row(types.InlineKeyboardButton("–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è", callback_data="remaining_time"))

    bot.send_message(message.chat.id, 
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MIDEROV SNOS!\n\n"
        "–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–∞–Ω–∞–ª—ã\n"
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    cursor = conn.cursor()
    
    if call.data == "buy_subscription":
        bot.answer_callback_query(call.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:")

        price_text = ("–ü—Ä–∞–π—Å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞üí∏\n"
                     "1 –¥–µ–Ω—å - 50‚ÇΩ\n"
                     "1 –Ω–µ–¥–µ–ª—è - 150‚ÇΩ\n"
                     "1 –º–µ—Å—è—Ü - 400‚ÇΩ\n"
                     "1 –≥–æ–¥ - 1000‚ÇΩ\n"
                     "–Ω–∞–≤—Å–µ–≥–¥–∞ - 3500‚ÇΩ\n\n"
                     "–ü–∏—Å–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏üì• - @liderdoxa\n"
                     "–¢–∞–∫ –∂–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ –∫–ª—é—á–µ–π —É—Å–ª–æ–≤–Ω–æ –ø–æ–¥ —Ä–∞–∑–¥–∞—á—É, —Ç–æ –≤–æ–∑–º–æ–∂–µ–Ω –æ–ø—Çüî•")

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=price_text,
            reply_markup=markup
        )

    elif call.data == "referral":
        referral_link = f"https://t.me/{bot.get_me().username}?start={call.from_user.id}"

        cursor.execute('SELECT invited_count FROM referrals WHERE user_id = ?', (call.from_user.id,))
        
        result = cursor.fetchone()
        invited_count = result[0] if result else 0

        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ü—Ä–∏–≥–ª–∞—à–∞—è –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 20% –≤—Ä–µ–º–µ–Ω–∏ —Å –∫—É–ø–ª–µ–Ω–Ω–æ–π –∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {referral_link}\n\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {invited_count}",
            reply_markup=markup
        )

    elif call.data == "create_promocode":
        if user_id in PROMO_ADMIN_IDS:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="create_2h"),
                types.InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data="create_1d")
            )
            markup.row(
                types.InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="create_1w"),
                types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="create_1m"),
                types.InlineKeyboardButton("1 –≥–æ–¥", callback_data="create_1y"),
                types.InlineKeyboardButton("–Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="create_forever")
            )
            markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")

    elif call.data.startswith("create_"):
        if user_id in PROMO_ADMIN_IDS:
            duration_map = {
                "2h": timedelta(hours=2),
                "1d": timedelta(days=1),
                "1w": timedelta(weeks=1),
                "1m": timedelta(days=30),
                "1y": timedelta(days=365),
                "forever": timedelta(days=36500)  # ~100 years
            }

            duration_key = call.data.split("_")[1]
            duration = duration_map.get(duration_key)

            if duration:
                promocode = generate_promocode("PROMO_")
                cursor.execute('INSERT INTO promocodes (code, duration) VALUES (?, ?)', (promocode, duration.total_seconds()))
                conn.commit()

                markup = types.InlineKeyboardMarkup()
                markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

                bot.send_message(
                    call.message.chat.id,
                    text=f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {promocode}\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {duration}",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    call.message.chat.id,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")

    elif call.data == "remaining_time":
        cursor.execute('SELECT end_time FROM user_promotions WHERE user_id = ?', (user_id,))
        promotion = cursor.fetchone()
        
        if promotion and datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f') > datetime.now():
            remaining_time = datetime.strptime(promotion[0], '%Y-%m-%d %H:%M:%S.%f') - datetime.now()
            remaining_days = remaining_time.days
            remaining_hours = remaining_time.seconds // 3600
            remaining_minutes = (remaining_time.seconds % 3600) // 60

            markup = types.InlineKeyboardMarkup()
            markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: {remaining_days} –¥–Ω. {remaining_hours} —á. {remaining_minutes} –º–∏–Ω.",
                reply_markup=markup
            )
        else:
            markup = types.InlineKeyboardMarkup()
            markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu"))

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=markup
            )

    elif call.data == "snos":
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–æ—Å–∞:")

        bot.register_next_step_handler(call.message, handle_complaint)

    elif call.data == "main_menu":
        send_welcome(call.message)

def handle_complaint(message):
    user_id = message.from_user.id
    complaint_text = message.text

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–Ω–æ—Å–∞ –∏ —Å–∞–º —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
    bot.delete_message(message.chat.id, message.message_id - 1)
    bot.delete_message(message.chat.id, message.message_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username or message.from_user.id}\n–¢–µ–∫—Å—Ç: {complaint_text}")

    bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")

    delay = random.randint(30, 40)
    sleep(delay)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ—á—Ç—É
    process_complaint(user_id, complaint_text)

def process_complaint(user_id, complaint_text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ—á—Ç—É –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    send_email(complaint_text)

    bot.send_message(
        user_id,
        "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å 439 –ø–æ—á—Ç‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ —Å–Ω–æ—Å–∞‚òï"
    )

def send_email(complaint_text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—á—Ç—É

    for email_account in EMAIL_ACCOUNTS:
        email = email_account['email']
        password = email_account['password']

        subject = "–ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"
        body = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∂–∞–ª–æ–±—É:\n\n{complaint_text}"

        msg = MIMEMultipart()
        msg['From'] = email
        msg['To'] = ", ".join(EMAIL_ADDRESSES)
        msg['Subject'] = subject

        msg.attach(MIMEText(body, 'plain'))

        try:
            server = smtplib.SMTP_SSL('smtp.mail.ru', 465)
            server.ehlo()
            server.login(email, password)
            server.sendmail(email, EMAIL_ADDRESSES, msg.as_string())
            server.close()
        except Exception as e:
            print(f"Failed to send email: {str(e)}")

if __name__ == "__main__":
    load_user_data()
    schedule_updates()
    bot.polling(none_stop=True)